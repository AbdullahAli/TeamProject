/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package infopharma.order;

import infopharma.Validator;
import infopharma.acc.InfoPharmaFrame;
import infopharma.acc.InfoPharmaPanel;
import infopharma.acc.ViewMainMenu;
import infopharma.data.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.TableView.TableRow;

/**
 *
 * @author Abdullah
 */
public class ViewPlaceOrder extends InfoPharmaPanel{
    private CatDBAccess catDBAccess;
    private OrderDBAccess ordDBAccess;
    private HashMap<Integer, String> productIDs;
    private HashMap<Integer, Product> products;
    private int selectedID = 0;
    private double credit;
    private int discountID;
    private int accountNumber = 1;
	
    public ViewPlaceOrder(InfoPharmaFrame mainMenuFrame)
    {
        catDBAccess = new CatDBAccess();
        ordDBAccess = new OrderDBAccess();
        products = catDBAccess.getProductsInformation();
        initComponents();
        setFrame(mainMenuFrame);
        populateComboProducts();
        lblError.setVisible(false);
        isEditButtonsVisibleAndEnabled(false);
        this.setVisible(true);
        updateCredit();
        discountID = ordDBAccess.getDiscountID(accountNumber);
        setFieldsOpaque();
    }
    
    public void setFieldsOpaque()  {
        JTextField[] fields = {txtCost, txtDescription, txtDiscount, txtOrderTotal, txtQuantity, txtSubtotal, txtTotal, txtVAT, txtName};
        setFieldsOpaque(fields);
    }
    
    public double getDiscountValue()
    {
        switch(discountID)
        {
            case 1 :
                return 0.10;
            case 2: 
                return 0.20;
        }
        return 0;
    }
    
    public double calculateDiscount()
    {
        double subtotal = 0;
        for(int i = 0; i < tblOrder.getRowCount(); i++)
        {
           subtotal += Double.parseDouble(tblOrder.getValueAt(i, 4).toString());
        }
        double discount = (subtotal * getDiscountValue());
        return discount;
    }
    
    public void updateCredit()
    {
        //for testing
        credit = ordDBAccess.getCredit(accountNumber);
        txtCredit.setText("Your Available Credit: Â£"+convertToDoubleWithoutPrecisionLose(credit+""));
        
    }

    public static InfoPharmaFrame getFrame() 
    {
        return InfoPharmaPanel.getFrame();
    }

    public static void setFrame(InfoPharmaFrame frame) 
    {
        InfoPharmaPanel.setFrame(frame);
    }
    

    public void populateComboProducts()
    {
        ddlProducts.removeAllItems();
        productIDs = catDBAccess.getSaleableProducts();
        for(String product : productIDs.values())
        {
            ddlProducts.addItem(product);
        }
        ddlProducts.updateUI();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layeredPanel = new javax.swing.JLayeredPane();
        txtCredit = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        txtOrderTotal = new javax.swing.JFormattedTextField();
        txtVAT = new javax.swing.JFormattedTextField();
        txtSubtotal = new javax.swing.JFormattedTextField();
        txtName = new javax.swing.JTextField();
        ddlProducts = new javax.swing.JComboBox();
        txtTotal = new javax.swing.JFormattedTextField();
        txtDiscount = new javax.swing.JFormattedTextField();
        txtQuantity = new javax.swing.JFormattedTextField();
        txtCost = new javax.swing.JFormattedTextField();
        txtDescription = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        btnAdd = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        btnLess = new javax.swing.JButton();
        btnMore = new javax.swing.JButton();
        btnGo = new javax.swing.JButton();
        btnMainMenu1 = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();

        txtCredit.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        txtCredit.setForeground(new java.awt.Color(102, 102, 102));
        txtCredit.setText("Your Available Credit: ");
        txtCredit.setBounds(35, 110, 470, 17);
        layeredPanel.add(txtCredit, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setIcon(new javax.swing.ImageIcon(getClass().getResource("/infopharma/acc/images/error.png"))); // NOI18N
        lblError.setBounds(10, 530, 820, 40);
        layeredPanel.add(lblError, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtOrderTotal.setEditable(false);
        txtOrderTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtOrderTotal.setBounds(350, 510, 250, 20);
        layeredPanel.add(txtOrderTotal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtVAT.setEditable(false);
        txtVAT.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtVAT.setText("17.5");
        txtVAT.setBounds(40, 510, 250, 20);
        layeredPanel.add(txtVAT, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtSubtotal.setEditable(false);
        txtSubtotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtSubtotal.setBounds(350, 430, 250, 20);
        layeredPanel.add(txtSubtotal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtName.setEditable(false);
        txtName.setBounds(170, 180, 90, 28);
        layeredPanel.add(txtName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ddlProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlProductsActionPerformed(evt);
            }
        });
        ddlProducts.setBounds(30, 180, 120, 27);
        layeredPanel.add(ddlProducts, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtTotal.setEditable(false);
        txtTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtTotal.setBounds(740, 180, 110, 28);
        layeredPanel.add(txtTotal, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtDiscount.setBounds(40, 430, 260, 20);
        layeredPanel.add(txtDiscount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        txtQuantity.setBounds(570, 180, 60, 28);
        layeredPanel.add(txtQuantity, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtCost.setEditable(false);
        txtCost.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtCost.setBounds(460, 180, 90, 28);
        layeredPanel.add(txtCost, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtDescription.setEditable(false);
        txtDescription.setBounds(290, 180, 150, 30);
        layeredPanel.add(txtDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        btnCancel.setBounds(850, 300, 95, 29);
        layeredPanel.add(btnCancel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        btnUpdate.setBounds(730, 330, 94, 29);
        layeredPanel.add(btnUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnRemove.setText("REMOVE");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        btnRemove.setBounds(760, 230, 95, 29);
        layeredPanel.add(btnRemove, javax.swing.JLayeredPane.DEFAULT_LAYER);

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Unit Price", "Quantity", "Total"
            }
        ));
        tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrder);

        jScrollPane1.setBounds(30, 240, 680, 120);
        layeredPanel.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        btnAdd.setBounds(860, 220, 75, 29);
        layeredPanel.add(btnAdd, javax.swing.JLayeredPane.DEFAULT_LAYER);

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/infopharma/order/images/orderplacing.png"))); // NOI18N
        imageLabel.setBounds(0, 0, 1100, 570);
        layeredPanel.add(imageLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnLess.setText("less");
        btnLess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnLessMousePressed(evt);
            }
        });
        btnLess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLessActionPerformed(evt);
            }
        });
        btnLess.setBounds(690, 180, 20, 29);
        layeredPanel.add(btnLess, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnMore.setText("more");
        btnMore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnMoreMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMoreMouseClicked(evt);
            }
        });
        btnMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoreActionPerformed(evt);
            }
        });
        btnMore.setBounds(650, 180, 30, 29);
        layeredPanel.add(btnMore, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnGo.setText("GO");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });
        btnGo.setBounds(1020, 70, 75, 470);
        layeredPanel.add(btnGo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnMainMenu1.setText("main menu");
        btnMainMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenu1ActionPerformed(evt);
            }
        });
        btnMainMenu1.setBounds(1020, 540, 80, 30);
        layeredPanel.add(btnMainMenu1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnMainMenu.setText("main menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });
        btnMainMenu.setBounds(1010, 10, 80, 50);
        layeredPanel.add(btnMainMenu, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layeredPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layeredPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 570, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        // TODO add your handling code here:
        this.getFrame().setPanel(new ViewMainMenu(this.getFrame()));
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        tryToAddProductToOrder();
        System.out.println("Discount is"+calculateDiscount());
        
        
        System.out.println("without: "+removeComma(txtTotal.getText()));
    }//GEN-LAST:event_btnAddActionPerformed

    public void tryToAddProductToOrder()
    {
        setErrorMessage(false, "");
        updateTotalField();   
        
        if(hasEnoughCredit())
        {
            addProductToOrder();
            updateTotals(); 
        }
    }
    
    public boolean hasEnoughCredit()
    {
        double newProductTotal = Double.parseDouble(txtTotal.getValue().toString());
        if(credit >= (calculateOrderTotal() + newProductTotal))
        {
            return true;
        }
        setErrorMessage(true, "You are trying to add a product which exceeds your credit");
        return false;
    }
    
    public String convertToDoubleWithoutPrecisionLose(String e)
    {
        java.text.DecimalFormat df = new java.text.DecimalFormat("0.00");  
        if (!e.isEmpty())
        {
            try
            {
                double d = Double.parseDouble(e);
                return df.format(d);  
            }
            catch(Exception err){}             
        }
        return "0.00";
    }
    
    public void setErrorMessage(boolean isVisible, String message)
    {
        lblError.setText(message);
        lblError.setVisible(isVisible);
    }
    
    public boolean isQuantityAvilable()
    {
        int quantityWanted = Integer.parseInt(txtQuantity.getText());
        int productID = Integer.parseInt(getSelectedProductID());
        Product productWanted = products.get(productID);
        int quantityAvilable = productWanted.getCurrentStock();
        System.out.println("product is: " +productWanted + " and id is: "+getSelectedProductID());
        
        if(quantityWanted <= quantityAvilable)
        {
            return true;
        }
        return false;
    }
    
    public boolean isQuantityZero()
    {
        if(Integer.parseInt(txtQuantity.getText()) == 0)
        {
            return true;
        }
        return false;
    }
    
    public String getSelectedProductID()
    {
        return ddlProducts.getSelectedItem().toString();
    }
    
    public void addProductToOrder()
    {
        if(!isQuantityZero() && !isAlreadyAdded(getSelectedProductID()) && isQuantityAvilable())
        {
            DefaultTableModel model =(DefaultTableModel) tblOrder.getModel();
            Vector row = new Vector(5);
            row.add(ddlProducts.getSelectedItem().toString());
            row.add(txtName.getText());
            row.add(txtCost.getValue());
            row.add(txtQuantity.getValue());
            row.add(convertToDoubleWithoutPrecisionLose(txtTotal.getValue().toString()));
            model.addRow(row); 
        }
        else
        {
            if(isQuantityZero())
            {
                System.out.println("The quantity is zero");
                setErrorMessage(true, "Please select a quantity more than zero");
            }
            else if(isAlreadyAdded(getSelectedProductID()))
            {
                System.out.println("Already added the product");
                setErrorMessage(true, "You have already added this product to your order");
            }
            else if(!isQuantityAvilable())
            {
                System.out.println("The quantity is not avilable");
                setErrorMessage(true, "The selected quantity is not available");
            }
        }       
    }
    
    public boolean isAlreadyAdded(String productID)
    {
        for(int i = 0; i < tblOrder.getRowCount(); i++)
        {
            if(productID == tblOrder.getValueAt(i, 0))
            {
                return true;
            }
        }
        return false;
    }
    
    public void changeProductSelection()
    {
        clearProductFields();
        int productID = Integer.parseInt(ddlProducts.getSelectedItem().toString());
        System.out.println("id is "+ productID);
        setFieldValues(productID);
    }
    
    private void ddlProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlProductsActionPerformed
        setErrorMessage(false, "");
        changeProductSelection();
    }//GEN-LAST:event_ddlProductsActionPerformed

    public void clearProductFields()
    {
        txtCost.setText("");
        txtDescription.setText("");
        txtName.setText("");
        txtQuantity.setText("");
        txtTotal.setText("");
        txtDiscount.setText("");
    }
    
    private void btnMoreMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMoreMousePressed
        setErrorMessage(false, "");
        increaseQuantity();
        
    }//GEN-LAST:event_btnMoreMousePressed

    private void btnLessMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLessMousePressed
        setErrorMessage(false, "");
        decreaseQuantity();
    }//GEN-LAST:event_btnLessMousePressed

    private void btnMoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMoreMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMoreMouseClicked

    public void removeSelectedProduct()
    {
        try
        {
           int row = tblOrder.getSelectedRow(); 
           DefaultTableModel model = (DefaultTableModel) tblOrder.getModel();
           System.out.println(model.getValueAt(row, 0));
           model.removeRow(row);
        }
        catch(Exception e)
        {
            System.out.println("Error: "+e.getMessage());
        } 
    }
    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        setErrorMessage(false, "");
        removeSelectedProduct();
        isEditButtonsVisibleAndEnabled(false);
        btnAdd.setVisible(true);
        btnAdd.setEnabled(true);
        ddlProducts.setEnabled(true);
        restProductFields();
        updateTotals();
    }//GEN-LAST:event_btnRemoveActionPerformed

    
    public void restProductFields()
    {
        int id = Integer.parseInt(getSelectedProductID());
        Product product = products.get(id);
        
        txtCost.setText(""+product.getUnitPrice());
        txtDescription.setText(""+product.getDescription());
        txtName.setText(""+product.getName());
        txtQuantity.setText(""+0);
        txtTotal.setText(""+0);
    }
    
    private void setOrderInEditMode(java.awt.event.MouseEvent evt)
    {
        if (evt.getClickCount() == 2) 
        {
            int row = tblOrder.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) tblOrder.getModel();
            int id = Integer.parseInt(model.getValueAt(row, 0).toString());
            selectedID = id;
            System.out.println("will edit id: " +id);
            Product product = products.get(id);
            setProductValues(product);
            isEditButtonsVisibleAndEnabled(true);
            btnAdd.setVisible(false);
            btnAdd.setEnabled(false);
            ddlProducts.setEnabled(false);
            txtQuantity.setText(tblOrder.getValueAt(row, 3).toString());
            txtTotal.setText(convertToDoubleWithoutPrecisionLose(tblOrder.getValueAt(row, 4).toString()));
        }
    }
    
    public void isEditButtonsVisibleAndEnabled(boolean e)
    {
        btnRemove.setVisible(e);
        btnCancel.setVisible(e);
        btnUpdate.setVisible(e);
        
        btnRemove.setEnabled(e);
        btnCancel.setEnabled(e);
        btnUpdate.setEnabled(e);
    }
    
    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        setOrderInEditMode(evt);
    }//GEN-LAST:event_tblOrderMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        isEditButtonsVisibleAndEnabled(false);
        btnAdd.setVisible(true);
        btnAdd.setEnabled(true);
        ddlProducts.setEnabled(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        setErrorMessage(false, "");
        ddlProducts.setEnabled(true);
        isEditButtonsVisibleAndEnabled(false);
        updateSelectedProduct();
        updateTotals();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMoreActionPerformed

    private void btnLessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLessActionPerformed

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        if(!isOrderEmpty())
        {
           insertOrder(); 
        }
        else
        {
            System.out.println("the order is empty");
        }        
    }//GEN-LAST:event_btnGoActionPerformed

    private void btnMainMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMainMenu1ActionPerformed

    
    
    public void updateSelectedProduct()
    {
        int id = selectedID;
        System.out.println("The product with id as the following will be updated: " +id);
        
        for(int i = 0; i < tblOrder.getRowCount(); i++)
        {
            if(id == Integer.parseInt(tblOrder.getValueAt(i, 0).toString()))
            {
                if(isQuantityAvilable())
                {
                    tblOrder.setValueAt(txtQuantity.getText(), i, 3);
                    tblOrder.setValueAt(txtTotal.getText(), i, 4);
                    btnAdd.setVisible(true);
                    btnAdd.setEnabled(true);
                }
                else
                {
                    System.out.println("quantity not avilable");
                    setErrorMessage(true, "The selected quantity is not available");
                }
            }
        }
    }
    
    
    public void setProductValues(Product product)
    {
        txtCost.setValue(product.getUnitPrice());
        txtDescription.setText(product.getDescription());
        txtName.setText(product.getName());
        
        try
        {
            txtQuantity.setValue(tblOrder.getValueAt(tblOrder.getSelectedRow(), 3));
        }
        catch(Exception e)
        {
            
        }
        txtDiscount.setText(calculateDiscount()+"");
        
        updateTotalField();
    }
    
    public double calculateTotal(int quantity, double unitPrice)
    {
        return (quantity * unitPrice);
    }

    public void updateTotalField()
    {
        int quantity = Integer.parseInt(txtQuantity.getText());
        double unitPrice = Double.parseDouble(txtCost.getText());
        txtTotal.setValue(calculateTotal(quantity, unitPrice));
        
    }
    
    public void increaseQuantity()
    {
        int quantity = Integer.parseInt(txtQuantity.getValue().toString());
        quantity += 1;
        txtQuantity.setValue(quantity);
        
        updateTotalField();
    }
    
    public void decreaseQuantity()
    {
        int quantity = Integer.parseInt(txtQuantity.getValue().toString());
        if(quantity > 0)
        {
            quantity -= 1;
            txtQuantity.setValue(quantity);
        }
        updateTotalField();
    }
    
    
    public void setFieldValues(int id)
    {
        Product selectedProduct = products.get(id);
        txtName.setText(selectedProduct.getName());
        txtDescription.setText(selectedProduct.getDescription());
        txtCost.setValue(selectedProduct.getUnitPrice());
        txtQuantity.setValue(0);
    }
    
   public boolean isOrderEmpty()
   {
       if(tblOrder.getRowCount() == 0)
       {
           return true;
       }
       return false;
   }
    
    public void insertOrder()
    {
        ArrayList<OrderedProduct> orderedProducts = new ArrayList<OrderedProduct>();
        for(int i = 0; i < tblOrder.getRowCount(); i++)
        {
            OrderedProduct product = new OrderedProduct();
            product.setID(Integer.parseInt(tblOrder.getValueAt(i, 0).toString()));
            product.setQuantity(Double.parseDouble(tblOrder.getValueAt(i, 3).toString()));
            product.setTotal(Double.parseDouble(tblOrder.getValueAt(i, 4).toString()));
            
            orderedProducts.add(product);
        }
        ordDBAccess.insertOrder(orderedProducts, accountNumber, removeComma(txtOrderTotal.getText()));
    }
    
   public double calculateSubtotal()
   {
       double subtotal = 0;
       for(int i = 0; i < tblOrder.getRowCount(); i++)
       {
           subtotal += removeComma(tblOrder.getValueAt(i, 4).toString());
       }
        subtotal -= calculateDiscount();
       return subtotal;
   }
   
   public double removeComma(String str)
   {
       String regex = "(?<=[\\d])(,)(?=[\\d])";
       Pattern p = Pattern.compile(regex);
       Matcher m = p.matcher(str);
 
       str = m.replaceAll("");
       System.out.println(str);
       double withoutComma = Double.parseDouble(str);
       return withoutComma;
   }
   
   public double calculateOrderTotal()
   {
       double subtotal = calculateSubtotal();;
       double vat = subtotal * (Double.parseDouble(txtVAT.getText().toString())/100);
       double total = vat + subtotal;
       return total;
   }
   
   public void updateTotals()
   {
       txtSubtotal.setValue(calculateSubtotal());
       txtOrderTotal.setValue(calculateOrderTotal());
       txtDiscount.setValue(calculateDiscount());
   }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnLess;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnMainMenu1;
    private javax.swing.JButton btnMore;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox ddlProducts;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLayeredPane layeredPanel;
    private javax.swing.JLabel lblError;
    private javax.swing.JTable tblOrder;
    private javax.swing.JFormattedTextField txtCost;
    private javax.swing.JLabel txtCredit;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JFormattedTextField txtDiscount;
    private javax.swing.JTextField txtName;
    private javax.swing.JFormattedTextField txtOrderTotal;
    private javax.swing.JFormattedTextField txtQuantity;
    private javax.swing.JFormattedTextField txtSubtotal;
    private javax.swing.JFormattedTextField txtTotal;
    private javax.swing.JFormattedTextField txtVAT;
    // End of variables declaration//GEN-END:variables
}
